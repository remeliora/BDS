Эти скрипты представляют собой базовые строительные блоки для обработки текстовых данных в Python и
демонстрируют ключевые концепции работы с файлами, регулярными выражениями и структурами данных.

1. `egrep.py` (аналог Unix-утилиты grep)
- Назначение: Поиск строк, соответствующих регулярному выражению
  - Принимает регулярное выражение как аргумент командной строки
  - Читает входные данные из стандартного потока ввода (`sys.stdin`)
  - Выводит строки, содержащие совпадения с регулярным выражением
- Пример использования: `python egrep.py "pattern" < input.txt`

2. `line_count.py` (подсчет строк)
- Назначение: Подсчет количества строк во входных данных
  - Читает данные из стандартного ввода построчно
  - Считает количество строк
  - Выводит итоговое число
- Пример использования: Часто используется в конвейерах (pipes) после других команд

3. `most_common_words.py` (частотный анализ слов)
- Назначение: Поиск N самых часто встречающихся слов
  - Принимает число N как аргумент командной строки
  - Читает текст из стандартного ввода
  - Разбивает на слова, приводит к нижнему регистру
  - Использует `Counter` для подсчета частот
  - Выводит топ-N слов с их частотами
- Особенности: Игнорирует пустые слова и регистр букв

4. Работа с файлами (`read_file.py`, `write_file.py`)
- Основные операции:
  - Чтение всего файла сразу (`'r'` режим)
  - Перезапись файла (`'w'` режим)
  - Добавление в конец файла (`'a'` режим)
- Особенности: Использует контекстные менеджеры (`with`), что гарантирует корректное закрытие файлов

5. `count_hash_lines.py` (анализ комментариев)
- Назначение: Подсчет строк, начинающихся с `#`
  - Читает файл построчно
  - Проверяет начало каждой строки на символ `#`
  - Считает количество таких строк

6. `count_email_domains.py` (анализ email-адресов)
- Назначение: Статистика доменов email-адресов
  - Извлекает домен (часть после @) из каждого адреса
  - Использует `Counter` для подсчета частот доменов
  - Выводит отсортированный список доменов с частотами

7. Работа с CSV (`read_csv.py`, `write_csv.py`, `bad_csv.py`)
- Чтение CSV:
  - Использует модуль `csv` для чтения TSV-файла (табуляция как разделитель)
  - Разбирает каждую строку на поля (дата, символ, цена)

- Запись CSV:
  - Корректно записывает данные в CSV-формат
  - Обрабатывает заголовки и данные раздельно
  - Автоматически экранирует специальные символы

- Проблемная запись (`bad_csv.py`):
  - Демонстрирует наивный подход к генерации CSV
  - Проблемы: не обрабатывает запятые в данных, нет экранирования
  - Может создавать некорректные CSV-файлы

